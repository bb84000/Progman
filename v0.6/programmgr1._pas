unit programmgr1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Grids, ShellAPI, ImgList, ComCtrls, CommCtrl, BButils,
  ExtCtrls, JvImageList, ShellCtrls;

 type
    
    TFPrgMgr = class(TForm)
    Button1: TButton;
    EditReport: TEdit;
    ImageList1: TImageList;
    ListView1: TListView;
    PrintDialog1: TPrintDialog;
    Button2: TButton;
    Label1: TLabel;
    ImageList2: TImageList;
    ImageList3: TImageList;
    ImageList4: TImageList;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);


    procedure ListView1CustomDrawItem(Sender: TCustomListView;
      Item: TListItem; State: TCustomDrawState; var DefaultDraw: Boolean);
    procedure ListView1Compare(Sender: TObject; Item1, Item2: TListItem;
      Data: Integer; var Compare: Integer);
    procedure ListView1Resize(Sender: TObject);

  private
    { Déclarations privées }
  public
    { Déclarations publiques }
    oldw: array [0..50] of Integer;
    procedure PrintListview(oListView: TListView);
    procedure FindAll (const Path: String;
                          Attr: Integer;
                          SG: TStringGrid) ;
    procedure LV_InsertFiles(strPath: string; ListView: TListView; ImageLista: TImageList; Directory: Bool);
  end;


var
  FPrgMgr: TFPrgMgr;

implementation

uses Types;

{$R *.dfm}


Procedure GetIconFromFile(aFile:String; var aIcon : TIcon;SHIL_FLAG:Cardinal);
var
  aImgList    : HIMAGELIST;
  SFI         : TSHFileInfo;
Begin
    //Get the index of the imagelist
    SHGetFileInfo(PChar(aFile), FILE_ATTRIBUTE_NORMAL, SFI,
                 SizeOf( TSHFileInfo ), SHGFI_ICON or SHGFI_LARGEICON or SHGFI_SHELLICONSIZE or
                 SHGFI_SYSICONINDEX or SHGFI_TYPENAME or SHGFI_DISPLAYNAME );

    if not Assigned(aIcon) then
    aIcon:= TIcon.Create;
    //get the imagelist
    aImgList:= GetImageListSH(SHIL_FLAG);
    //extract the icon handle
    aIcon.Handle:= ImageList_GetIcon(aImgList, Pred(ImageList_GetImageCount(aImgList)), ILD_NORMAL);
End;



procedure TFPrgMgr.FindAll (const Path: String;
                          Attr: Integer;
                          SG: TStringGrid) ;
var
   Res: TSearchRec;
   EOFound: Boolean;
begin
   EOFound:= False;
   if FindFirst(Path, Attr, Res) < 0 then
     exit
   else
     while not EOFound do begin
       SG.Cells[0, SG.RowCount-1]:= (Res.Name) ;
       EOFound:= FindNext(Res) <> 0;
       SG.Rowcount:= SG.Rowcount+1;


     end;
   FindClose(Res) ;
end;


procedure TFPrgMgr.LV_InsertFiles(strPath: string; ListView: TListView; ImageLista: TImageList; Directory: Bool);
var
  i: Integer;
  w : Integer;
  MyIcon: TIcon;
  SearchRec: TSearchRec;
  ListItem: TListItem;
  FileInfo: SHFILEINFO;
  FileAttr: Bool;
  IL: HIMAGELIST;
  FilDat: TDateTime;
  ImageList: TImageList;
begin
  ListView.LargeImages.Clear;
 //IL := TImageList.Create(nil);
 //ImageList:= TImagelist.Create(nil);
 //ImageList.Height:= 48;
 //ImageList.Width:= 48;
 ImageList4.Clear;
 ImageList4.Handle := ImageList_Create(48, 48, ILC_COLOR32 or ILC_MASK, 0, ImageList4.AllocBy);

 //ListView.Items.Clear;
  // Create a temporary TIcon
  MyIcon := TIcon.Create;
  //Icon.Width:= 48;
  //Icon.Height:= 48;                                                        SearchRec
  ListView.Items.BeginUpdate;
  ListView_SetIconSpacing(ListView.handle, 78,108);
  FillChar(SearchRec,  SizeOf(TSearchRec), Chr(0));
  try
    i:= -1;
    // search for the first file
    i := FindFirst(strPath + '*.*', faAnyFile, SearchRec);
    while i = 0 do
    begin
      with ListView do
      begin
        // On directories and volumes
        if Directory then FileAttr:= ((SearchRec.Attr and FaDirectory)= FaDirectory) else
                     FileAttr:= ((SearchRec.Attr and FaDirectory)<> FaDirectory) ;
        if FileAttr
        {((SearchRec.Attr and FaDirectory = FileAttr)  and
          (SearchRec.Attr and FaVolumeId <> FaVolumeID))} then
        begin
          ListItem := ListView.Items.Add;
          //Get The DisplayName
          SHGetFileInfo(PChar(strPath + SearchRec.Name), 0, FileInfo,
            SizeOf(FileInfo), SHGFI_DISPLAYNAME);
          Listitem.Caption := FileInfo.szDisplayName;
          W:= Label1.Canvas.TextWidth(ListItem.Caption);
          if W > oldw[0] then oldw[0]:= w;
          ListItem.SubItems.Add(IntToStr(SearchRec.size div 1024)+' Ko');
          W:= Label1.Canvas.TextWidth(ListItem.SubItems[0]);
          if W > oldw[1] then oldw[1]:= w;
          // Get The TypeName
          SHGetFileInfo(PChar(strPath + SearchRec.Name), 0, FileInfo,
            SizeOf(FileInfo), SHGFI_TYPENAME);
          ListItem.SubItems.Add(FileInfo.szTypeName);
          W:= Label1.Canvas.TextWidth(ListItem.SubItems[1]);
          if W > oldw[2] then oldw[2]:= w;
          FilDat:= FileDateToDateTime(FileAge(strPath + SearchRec.Name));
          ListItem.SubItems.Add(DateTimeToStr(FilDat));
          //Get The Icon That Represents The File
          Case ViewStyle of
          vsSmallIcon: begin
                         SHGetFileInfo(PChar(strPath + SearchRec.Name), 0, FileInfo,
                                      SizeOf(FileInfo), SHGFI_ICON or SHGFI_SMALLICON);
                         icon.Handle := FileInfo.hIcon;
                         ListItem.ImageIndex := ImageList1.AddIcon(Icon);
                       end;
          vsReport:   begin
                         SHGetFileInfo(PChar(strPath + SearchRec.Name), 0, FileInfo,
                                      SizeOf(FileInfo), SHGFI_ICON or SHGFI_SMALLICON);
                         icon.Handle := FileInfo.hIcon;
                         ListItem.ImageIndex := ImageList1.AddIcon(Icon);
                       end;
          vsIcon     : begin
                         {SHGetFileInfo(PChar(strPath + SearchRec.Name), 0, FileInfo,
                                      SizeOf(FileInfo), SHGFI_ICON or SHGFI_LARGEICON);
                                                  icon.Handle := FileInfo.hIcon;
                         ListItem.ImageIndex := ImageList2.AddIcon(Icon); }
                         GetIconFromFile(strPath + SearchRec.Name,Myicon,SHIL_EXTRALARGE);
                         ListItem.ImageIndex := ImageList_AddIcon(ImageList4.Handle, MyIcon.Handle);
                         //ListItem.ImageIndex := ImageList3.AddIcon(Icon);
                         //ShowMessage(SearchRec.Name);
                       end;
          end;


          // Destroy the Icon
          DestroyIcon(FileInfo.hIcon);
        end;
      end;
      i := FindNext(SearchRec);
    end;
  finally
    MyIcon.Free;
    ListView.Items.EndUpdate;
  end;
end;

procedure TFPrgMgr.Button1Click(Sender: TObject);
var

icon: TIcon;
begin
  ListView1.Clear;// Assign a Imagelist to the ListView
  Imagelist1.Clear;
  ImageList2.Clear;
  ImageList3.Clear;
  ImageList4.Clear;
  LV_InsertFiles('C:\Users\Bernard\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Programmes courants\', ListView1, ImageList3, False);

end;


procedure TFPrgMgr.ListView1CustomDrawItem(Sender: TCustomListView;
  Item: TListItem; State: TCustomDrawState; var DefaultDraw: Boolean);
var
  rTmp: TRect;
  //bTmp: TBitmap;
  iTmp: TImage;
  lv: TListView;
  i: Integer;
  w: Integer;
  r: Trect;
  icon: TIcon;
begin
  inherited;
  Icon:= TIcon.Create;

  DefaultDraw := False;
  iTmp:= Timage.Create(nil);
  ImageList4.GetIcon(Item.ImageIndex,icon);
  iTmp.Picture.Icon.Assign(icon);
  lv := TListView(Sender);
  try
    ListView_GetSubItemRect(lv.Handle, Item.Index, 0, LVIR_BOUNDS, @rTmp);
    w:= rTmp.Right-rTmp.Left-imagelist4.width;

    lv.Canvas.Draw(rTmp.Left+w div 2, rTmp.Top+10, iTmp.Picture.Graphic);
    r.Left:= rTmp.Left;
    r.Right:= rTmp.Right;
    r.Top:= rTmp.Top+imagelist4.height+15;
    r.Bottom:= rTmp.Bottom+25;
    DrawTextCentered(lv.Canvas, R, Item.Caption);
  finally
    FreeAndNil(iTmp);
  end;
  Icon.Free; 
end;



procedure TFPrgMgr.ListView1Compare(Sender: TObject; Item1, Item2: TListItem;
  Data: Integer; var Compare: Integer);
  var
   intItem1,
   intItem2: TDateTime;
begin
   intItem1 := StrToDateTime(Item1.SubItems[2]) ;
   intItem2 := StrToDateTime(Item2.SubItems[2]);

   if intItem1 < intItem2 then
     Compare := -1
   else
   if intItem1 > intItem2 then
     Compare := 1
   else // intItem1 = intItem2
     Compare := 0;        
end;

procedure TFPrgMgr.ListView1Resize(Sender: TObject);
begin
ListView1.Arrange(arDefault	);

end;

end.
